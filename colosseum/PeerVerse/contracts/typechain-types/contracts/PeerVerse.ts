/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PeerVerseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bookSession"
      | "completeSession"
      | "getStudentSessions"
      | "getTeacherSkills"
      | "listSkill"
      | "owner"
      | "platformFee"
      | "rateSkill"
      | "renounceOwnership"
      | "sessionCount"
      | "sessions"
      | "skillCount"
      | "skills"
      | "studentSessions"
      | "teacherSkills"
      | "transferOwnership"
      | "updatePlatformFee"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RatingSubmitted"
      | "SessionCompleted"
      | "SessionCreated"
      | "SkillListed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bookSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentSessions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeacherSkills",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listSkill",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateSkill",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "skillCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skills",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "studentSessions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "teacherSkills",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bookSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeacherSkills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listSkill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateSkill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sessions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skillCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "studentSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teacherSkills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatingSubmittedEvent {
  export type InputTuple = [skillId: BigNumberish, rating: BigNumberish];
  export type OutputTuple = [skillId: bigint, rating: bigint];
  export interface OutputObject {
    skillId: bigint;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCompletedEvent {
  export type InputTuple = [sessionId: BigNumberish];
  export type OutputTuple = [sessionId: bigint];
  export interface OutputObject {
    sessionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCreatedEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    student: AddressLike,
    teacher: AddressLike,
    skillId: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    student: string,
    teacher: string,
    skillId: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    student: string;
    teacher: string;
    skillId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SkillListedEvent {
  export type InputTuple = [
    skillId: BigNumberish,
    teacher: AddressLike,
    title: string
  ];
  export type OutputTuple = [skillId: bigint, teacher: string, title: string];
  export interface OutputObject {
    skillId: bigint;
    teacher: string;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PeerVerse extends BaseContract {
  connect(runner?: ContractRunner | null): PeerVerse;
  waitForDeployment(): Promise<this>;

  interface: PeerVerseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bookSession: TypedContractMethod<[_skillId: BigNumberish], [void], "payable">;

  completeSession: TypedContractMethod<
    [_sessionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getStudentSessions: TypedContractMethod<
    [_student: AddressLike],
    [bigint[]],
    "view"
  >;

  getTeacherSkills: TypedContractMethod<
    [_teacher: AddressLike],
    [bigint[]],
    "view"
  >;

  listSkill: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  rateSkill: TypedContractMethod<
    [_skillId: BigNumberish, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sessionCount: TypedContractMethod<[], [bigint], "view">;

  sessions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        student: string;
        teacher: string;
        skillId: bigint;
        startTime: bigint;
        endTime: bigint;
        isCompleted: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  skillCount: TypedContractMethod<[], [bigint], "view">;

  skills: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, bigint, bigint] & {
        teacher: string;
        title: string;
        description: string;
        price: bigint;
        duration: bigint;
        isActive: boolean;
        rating: bigint;
        totalRatings: bigint;
      }
    ],
    "view"
  >;

  studentSessions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  teacherSkills: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bookSession"
  ): TypedContractMethod<[_skillId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "completeSession"
  ): TypedContractMethod<[_sessionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStudentSessions"
  ): TypedContractMethod<[_student: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTeacherSkills"
  ): TypedContractMethod<[_teacher: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "listSkill"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rateSkill"
  ): TypedContractMethod<
    [_skillId: BigNumberish, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sessionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sessions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        student: string;
        teacher: string;
        skillId: bigint;
        startTime: bigint;
        endTime: bigint;
        isCompleted: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "skillCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "skills"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, bigint, bigint] & {
        teacher: string;
        title: string;
        description: string;
        price: bigint;
        duration: bigint;
        isActive: boolean;
        rating: bigint;
        totalRatings: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentSessions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "teacherSkills"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RatingSubmitted"
  ): TypedContractEvent<
    RatingSubmittedEvent.InputTuple,
    RatingSubmittedEvent.OutputTuple,
    RatingSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "SessionCompleted"
  ): TypedContractEvent<
    SessionCompletedEvent.InputTuple,
    SessionCompletedEvent.OutputTuple,
    SessionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SessionCreated"
  ): TypedContractEvent<
    SessionCreatedEvent.InputTuple,
    SessionCreatedEvent.OutputTuple,
    SessionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SkillListed"
  ): TypedContractEvent<
    SkillListedEvent.InputTuple,
    SkillListedEvent.OutputTuple,
    SkillListedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RatingSubmitted(uint256,uint256)": TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;
    RatingSubmitted: TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;

    "SessionCompleted(uint256)": TypedContractEvent<
      SessionCompletedEvent.InputTuple,
      SessionCompletedEvent.OutputTuple,
      SessionCompletedEvent.OutputObject
    >;
    SessionCompleted: TypedContractEvent<
      SessionCompletedEvent.InputTuple,
      SessionCompletedEvent.OutputTuple,
      SessionCompletedEvent.OutputObject
    >;

    "SessionCreated(uint256,address,address,uint256)": TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;
    SessionCreated: TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;

    "SkillListed(uint256,address,string)": TypedContractEvent<
      SkillListedEvent.InputTuple,
      SkillListedEvent.OutputTuple,
      SkillListedEvent.OutputObject
    >;
    SkillListed: TypedContractEvent<
      SkillListedEvent.InputTuple,
      SkillListedEvent.OutputTuple,
      SkillListedEvent.OutputObject
    >;
  };
}
